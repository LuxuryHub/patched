import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime
from bypass import cookie_fresher  # –∏–∑ —Ç–≤–æ–µ–≥–æ –∫–æ–¥–∞
import logging

TOKEN = "8145614744:AAFSqIjLnxlvEPEhe9e1U_Vbcw6SOBdiHH0"
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ä—Ç
@dp.message(commands=["start"])
async def cmd_start(message: types.Message):
    kb = InlineKeyboardBuilder()
    kb.button(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å cookies.txt", callback_data="upload")
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ `cookies.txt`, –∏ —è –æ–±–Ω–æ–≤–ª—é –≤—Å–µ –∫—É–∫–∏ –æ–¥–Ω–∏–º –º–∞—Ö–æ–º üí™", reply_markup=kb.as_markup())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
@dp.message(lambda message: message.document and message.document.file_name.endswith("cookies.txt"))
async def handle_file(message: types.Message):
    user_id = message.from_user.id
    input_file_path = f"cookies_{user_id}.txt"
    result_file_path = f"fresh_{user_id}.txt"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    file = await bot.download(message.document)
    with open(input_file_path, "wb") as f:
        f.write(file.read())

    await message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ cookies...")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—É–∫
    valid, invalid = [], []

    with open(input_file_path, "r", encoding="utf-8") as f:
        cookies = [line.strip() for line in f if "_|WARNING" in line]

    for cookie in cookies:
        new_cookie = cookie_fresher(cookie)
        if new_cookie:
            valid.append(new_cookie)
        else:
            invalid.append(cookie)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    with open(result_file_path, "w", encoding="utf-8") as f:
        for new in valid:
            f.write(new + "\n")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    text = (
        f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n\n"
        f"üïí –í—Ä–µ–º—è: {now}\n"
        f"üü¢ –í–∞–ª–∏–¥–Ω—ã—Ö: {len(valid)}\n"
        f"üî¥ –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: {len(invalid)}\n\n"
        f"üìé –§–∞–π–ª: fresh_{user_id}.txt"
    )

    await message.answer_document(FSInputFile(result_file_path), caption=text)

    os.remove(input_file_path)
    os.remove(result_file_path)

# –§–∞–π–ª –Ω–µ cookies.txt
@dp.message(lambda message: message.document)
async def not_valid_file(message: types.Message):
    await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏ —Ñ–∞–π–ª —Å –∏–º–µ–Ω–µ–º `cookies.txt`!")

# –ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
@dp.message()
async def text_fallback(message: types.Message):
    await message.reply("üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª `cookies.txt` –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É–∫.")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(dp.start_polling(bot))
